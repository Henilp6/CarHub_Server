@page "/color/create"
@using CarHub_Server.Helper;
@inject IColorService _colorService
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime
@attribute [Authorize]

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">Create Color</h3>

    <div class="col-10">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            <EditForm Model="Color" OnValidSubmit="ColorCreate">
                <DataAnnotationsValidator />
                @*<ValidationSummary/>*@
                <div class="form-group">
                    <label>Color Name</label>
                    <InputText @bind-Value="Color.ColorName" class="form-control"></InputText>
                    <ValidationMessage For="()=>Color.ColorName"></ValidationMessage>
                </div>
                
                <div class="form-group py-2">
                    <button class="btn btn-primary">Create</button>
                    <NavLink href="color" class="btn btn-secondary">Back to Index</NavLink>
                </div>
            </EditForm>
        }
    </div>
</div>

@code
{
    [Parameter]
    public int Id { get; set; }

    private ColorCreateDTO Color { get; set; } = new ColorCreateDTO();
    public bool IsLoading { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsLoading = false;
        }
    }


    private async Task ColorCreate()
    {
        var response = await _colorService.CreateAsync<APIResponse>(Color);
        if (response != null && response.IsSuccess)
        {
            await _jsRuntime.ToastrSuccess("Color Create Sucessfully.");
            _navigationManager.NavigateTo("color");
        }
        else
        {
            if (response.ErrorMessages.Count > 0)
            {
                await _jsRuntime.ToastrError(response.ErrorMessages.FirstOrDefault());
            }
        }

    }
}
