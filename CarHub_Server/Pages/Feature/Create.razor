@page "/feature/create"
@using CarHub_Server.Helper;
@inject IFeatureService _featureService
@inject IFeatureTypeService _featureTypeService
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">Create Feature</h3>

    <div class="col-10">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            <EditForm Model="Feature" OnValidSubmit="FeatureCreate">
                <DataAnnotationsValidator />
                @*<ValidationSummary/>*@
                <div class="form-group">
                    <label>Feature Name</label>
                    <InputText @bind-Value="Feature.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=>Feature.Name"></ValidationMessage>
                </div>
                
          
                

                    <div class="form-group col-6">
                    <label>FeatureType</label>
                    <InputSelect @bind-Value="Feature.FeatureTypeId" class="form-select">
                        <option value="0" disabled="disabled" selected>--Select FeatureType--</option>
                        @foreach (var brand in FeatureTypes)
                        {
                                <option value="@brand.Id">@brand.FeatureTypeName</option>
                            }

                        </InputSelect>by
                        <ValidationMessage For="()=>Feature.FeatureTypeId"></ValidationMessage>
                    </div>
                   
            
                       
                <div class="form-group py-2">
                    <button class="btn btn-primary">Create</button>
                    <NavLink href="car" class="btn btn-secondary">Back to Index</NavLink>
                </div>
            </EditForm>
        }
    </div>
   
</div>

@code
{
    [Parameter]
    public int Id { get; set; }

    private FeatureCreateDTO Feature { get; set; } = new FeatureCreateDTO();

    private IEnumerable<FeatureTypeDTO> FeatureTypes { get; set; } = new List<FeatureTypeDTO>();


    public bool IsLoading { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories();
        }
    }

    private async Task LoadCategories()
    {
        IsLoading = true;
        StateHasChanged();
        var response = await _featureTypeService.GetAllAsync<APIResponse>();
        if (response != null && response.IsSuccess)
        {
            FeatureTypes = JsonConvert.DeserializeObject<List<FeatureTypeDTO>>(
                       Convert.ToString(response.Result));
            FeatureTypes = FeatureTypes.OrderBy(i => i.FeatureTypeName).ToList();
        }
        
        IsLoading = false;
        StateHasChanged();
    }

    private async Task FeatureCreate()
    {
        var response = await _featureService.CreateAsync<APIResponse>(Feature);
        if (response != null && response.IsSuccess)
        {
            await _jsRuntime.ToastrSuccess("Feature Create Sucessfully.");
            _navigationManager.NavigateTo("feature");
        }

        else
        {
            if (response.ErrorMessages.Count > 0)
            {
                await _jsRuntime.ToastrError(response.ErrorMessages.FirstOrDefault());
            }
        }

    }


    
}
