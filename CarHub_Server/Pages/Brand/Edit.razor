@page "/brand/edit/{id:int}"@using CarHub_Server.Helper;
@inject IJSRuntime _jsRuntime@inject IBrandService _brandService@inject IBrandUpload _brandUpload@inject NavigationManager _navigationManager<div class="row my-2">    <h3 class="card-title text-primary mb-3 ml-3">Update Brand</h3>    <div class="col-10">        @if (IsLoading)        {            <div class="text-center">                <img src="/images/loading.gif">            </div>        }        else        {            <EditForm Model="Brand" OnValidSubmit="BrandUpdate">                <DataAnnotationsValidator />                @*<ValidationSummary/>*@                <div class="form-group">                    <label>Brand Name</label>                    <InputText @bind-Value="Brand.BrandName" class="form-control"></InputText>                    <ValidationMessage For="()=>Brand.BrandName"></ValidationMessage>                </div>                <div class="form-group pt-4 col-6">                    <InputFile OnChange="HandleImageUpload"></InputFile>                </div>            @*     <div class="form-group col-6">                    <div class="form-check">                        <InputCheckbox @bind-Value="Brand.IsActive" class="form-check-input" checked></InputCheckbox>                        <label class="form-check-label">Is Active</label>                    </div>                </div> *@                <div class="form-group py-2">                    <button class="btn btn-primary">Update</button>                    <NavLink href="brand" class="btn btn-secondary">Back to Index</NavLink>                </div>            </EditForm>        }    </div>    <div class="col-md-2">        <img src="@Brand.BrandImage" class="w-100">    </div></div>@code{    [Parameter]    public int Id { get; set; }    private BrandUpdateDTO Brand { get; set; } = new BrandUpdateDTO();   // private CountryDTO CountryDTO { get; set; } = new CountryDTO();    public bool IsLoading { get; set; }    protected override async Task OnAfterRenderAsync(bool firstRender)    {        if (firstRender)        {
            await LoadCountry();        }    }
    private async Task LoadCountry()
    {
        IsLoading = true;
        StateHasChanged();
        var response = await _brandService.GetAsync<APIResponse>(Id);
        if (response != null && response.IsSuccess)
        {
            Brand = JsonConvert.DeserializeObject<BrandUpdateDTO>(Convert.ToString(response.Result));
        }


        IsLoading = false;
        StateHasChanged();
    }       private async Task BrandUpdate()    {        var response = await _brandService.UpdateAsync<APIResponse>(Brand);        if (response != null && response.IsSuccess)        {            await _jsRuntime.ToastrSuccess("Brand Update sucessfully.");            _navigationManager.NavigateTo("brand");        }        else        {            if (response.ErrorMessages.Count > 0)            {                await _jsRuntime.ToastrError(response.ErrorMessages.FirstOrDefault());            }        }            }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsLoading = true;
        try
        {
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                   
                        Brand.BrandImage = await _brandUpload.UploadFile(file);
                   
                }
            }
            IsLoading = false;
        }
        catch (Exception ex)
        {
            await _jsRuntime.ToastrError(ex.Message);
        }
    }}