@page "/featureType/edit/{id:int}"@using CarHub_Server.Helper;
@inject IJSRuntime _jsRuntime@inject IFeatureTypeService _featureTypeService@inject NavigationManager _navigationManager<div class="row my-2">    <h3 class="card-title text-primary mb-3 ml-3">Update FeatureType</h3>    <div class="col-10">        @if (IsLoading)        {            <div class="text-center">                <img src="/images/loading.gif">            </div>        }        else        {            <EditForm Model="FeatureType" OnValidSubmit="FeatureTypeUpdate">                <DataAnnotationsValidator />                @*<ValidationSummary/>*@                <div class="form-group">                    <label>FeatureType Name</label>                    <InputText @bind-Value="FeatureType.FeatureTypeName" class="form-control"></InputText>                    <ValidationMessage For="()=>FeatureType.FeatureTypeName"></ValidationMessage>                </div>            @*     <div class="form-group col-6">                    <div class="form-check">                        <InputCheckbox @bind-Value="Brand.IsActive" class="form-check-input" checked></InputCheckbox>                        <label class="form-check-label">Is Active</label>                    </div>                </div> *@                <div class="form-group py-2">                    <button class="btn btn-primary">Update</button>                    <NavLink href="featureType" class="btn btn-secondary">Back to Index</NavLink>                </div>            </EditForm>        }    </div>   </div>@code{    [Parameter]    public int Id { get; set; }

    private FeatureTypeUpdateDTO FeatureType { get; set; } = new FeatureTypeUpdateDTO();   // private CountryDTO CountryDTO { get; set; } = new CountryDTO();    public bool IsLoading { get; set; }    protected override async Task OnAfterRenderAsync(bool firstRender)    {        if (firstRender)        {
            await LoadCountry();        }    }
    private async Task LoadCountry()
    {
        IsLoading = true;
        StateHasChanged();
        var response = await _featureTypeService.GetAsync<APIResponse>(Id);
        if (response != null && response.IsSuccess)
        {
            FeatureType = JsonConvert.DeserializeObject<FeatureTypeUpdateDTO>(Convert.ToString(response.Result));
        }


        IsLoading = false;
        StateHasChanged();
    }


    private async Task FeatureTypeUpdate()    {
        var response = await _featureTypeService.UpdateAsync<APIResponse>(FeatureType);        if (response != null && response.IsSuccess)        {
            await _jsRuntime.ToastrSuccess("FeatureType Update sucessfully.");
            _navigationManager.NavigateTo("featureType");        }        else        {            if (response.ErrorMessages.Count > 0)            {                await _jsRuntime.ToastrError(response.ErrorMessages.FirstOrDefault());            }        }            }

   }